// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace KomminarLabs.cratedb
{
    public static class GetOrganization
    {
        /// <summary>
        /// To retrieve an organization.
        /// </summary>
        public static Task<GetOrganizationResult> InvokeAsync(GetOrganizationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrganizationResult>("cratedb:index/getOrganization:getOrganization", args ?? new GetOrganizationArgs(), options.WithDefaults());

        /// <summary>
        /// To retrieve an organization.
        /// </summary>
        public static Output<GetOrganizationResult> Invoke(GetOrganizationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrganizationResult>("cratedb:index/getOrganization:getOrganization", args ?? new GetOrganizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrganizationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the organization.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetOrganizationArgs()
        {
        }
        public static new GetOrganizationArgs Empty => new GetOrganizationArgs();
    }

    public sealed class GetOrganizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the organization.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetOrganizationInvokeArgs()
        {
        }
        public static new GetOrganizationInvokeArgs Empty => new GetOrganizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrganizationResult
    {
        /// <summary>
        /// The DublinCore of the organization.
        /// </summary>
        public readonly Outputs.GetOrganizationDcResult Dc;
        /// <summary>
        /// The notification email used in the organization.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// The id of the organization.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the organization.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Whether notifications enabled for the organization.
        /// </summary>
        public readonly bool NotificationsEnabled;
        /// <summary>
        /// The support plan type used in the organization.
        /// </summary>
        public readonly double PlanType;
        /// <summary>
        /// The project count in the organization.
        /// </summary>
        public readonly double ProjectCount;
        /// <summary>
        /// The role FQN.
        /// </summary>
        public readonly string RoleFqn;

        [OutputConstructor]
        private GetOrganizationResult(
            Outputs.GetOrganizationDcResult dc,

            string email,

            string id,

            string name,

            bool notificationsEnabled,

            double planType,

            double projectCount,

            string roleFqn)
        {
            Dc = dc;
            Email = email;
            Id = id;
            Name = name;
            NotificationsEnabled = notificationsEnabled;
            PlanType = planType;
            ProjectCount = projectCount;
            RoleFqn = roleFqn;
        }
    }
}
