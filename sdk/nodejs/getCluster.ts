// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * To retrieve a cluster.
 */
export function getCluster(args: GetClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("cratedb:index/getCluster:getCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterArgs {
    /**
     * The id of the cluster.
     */
    id: string;
}

/**
 * A collection of values returned by getCluster.
 */
export interface GetClusterResult {
    /**
     * The allow custom storage flag.
     */
    readonly allowCustomStorage: boolean;
    /**
     * The allow suspend flag.
     */
    readonly allowSuspend: boolean;
    /**
     * The backup schedule.
     */
    readonly backupSchedule: string;
    /**
     * The channel of the cluster.
     */
    readonly channel: string;
    /**
     * The CrateDB version of the cluster.
     */
    readonly crateVersion: string;
    /**
     * The DublinCore of the cluster.
     */
    readonly dc: outputs.GetClusterDc;
    /**
     * The deletion protected flag.
     */
    readonly deletionProtected: boolean;
    /**
     * The external IP address.
     */
    readonly externalIp: string;
    /**
     * The Fully Qualified Domain Name.
     */
    readonly fqdn: string;
    /**
     * The garbage collection available flag.
     */
    readonly gcAvailable: boolean;
    /**
     * The hardware specs of the cluster.
     */
    readonly hardwareSpecs: outputs.GetClusterHardwareSpecs;
    /**
     * The health of the cluster.
     */
    readonly health: outputs.GetClusterHealth;
    /**
     * The id of the cluster.
     */
    readonly id: string;
    /**
     * The IP whitelist of the cluster.
     */
    readonly ipWhitelists: outputs.GetClusterIpWhitelist[];
    /**
     * The last async operation of the cluster.
     */
    readonly lastAsyncOperation: outputs.GetClusterLastAsyncOperation;
    /**
     * The name of the cluster.
     */
    readonly name: string;
    /**
     * The number of nodes in the cluster.
     */
    readonly numNodes: number;
    /**
     * The origin of the cluster.
     */
    readonly origin: string;
    /**
     * The password of the cluster.
     */
    readonly password: string;
    /**
     * The product name of the cluster.
     */
    readonly productName: string;
    /**
     * The product tier of the cluster.
     */
    readonly productTier: string;
    /**
     * The product unit of the cluster.
     */
    readonly productUnit: number;
    /**
     * The project id of the cluster.
     */
    readonly projectId: string;
    /**
     * The subscription id of the cluster.
     */
    readonly subscriptionId: string;
    /**
     * The suspended flag.
     */
    readonly suspended: boolean;
    /**
     * The URL of the cluster.
     */
    readonly url: string;
    /**
     * The username of the cluster.
     */
    readonly username: string;
}
/**
 * To retrieve a cluster.
 */
export function getClusterOutput(args: GetClusterOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClusterResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("cratedb:index/getCluster:getCluster", {
        "id": args.id,
    }, opts);
}

/**
 * A collection of arguments for invoking getCluster.
 */
export interface GetClusterOutputArgs {
    /**
     * The id of the cluster.
     */
    id: pulumi.Input<string>;
}
