// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates and manages a cluster.
 */
export class Cluster extends pulumi.CustomResource {
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterState, opts?: pulumi.CustomResourceOptions): Cluster {
        return new Cluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cratedb:index/cluster:Cluster';

    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Cluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }

    /**
     * The allow custom storage flag.
     */
    public /*out*/ readonly allowCustomStorage!: pulumi.Output<boolean>;
    /**
     * The allow suspend flag.
     */
    public /*out*/ readonly allowSuspend!: pulumi.Output<boolean>;
    /**
     * The backup schedule.
     */
    public /*out*/ readonly backupSchedule!: pulumi.Output<string>;
    /**
     * The channel of the cluster. Default is `stable`.
     */
    public readonly channel!: pulumi.Output<string>;
    /**
     * The CrateDB version of the cluster.
     */
    public readonly crateVersion!: pulumi.Output<string>;
    /**
     * The DublinCore of the cluster.
     */
    public /*out*/ readonly dc!: pulumi.Output<outputs.ClusterDc>;
    /**
     * The deletion protected flag.
     */
    public /*out*/ readonly deletionProtected!: pulumi.Output<boolean>;
    /**
     * The external IP address.
     */
    public /*out*/ readonly externalIp!: pulumi.Output<string>;
    /**
     * The Fully Qualified Domain Name.
     */
    public /*out*/ readonly fqdn!: pulumi.Output<string>;
    /**
     * The garbage collection available flag.
     */
    public /*out*/ readonly gcAvailable!: pulumi.Output<boolean>;
    /**
     * The hardware specs of the cluster.
     */
    public readonly hardwareSpecs!: pulumi.Output<outputs.ClusterHardwareSpecs>;
    /**
     * The health of the cluster.
     */
    public /*out*/ readonly health!: pulumi.Output<outputs.ClusterHealth>;
    /**
     * The IP whitelist of the cluster.
     */
    public /*out*/ readonly ipWhitelists!: pulumi.Output<outputs.ClusterIpWhitelist[]>;
    /**
     * The name of the cluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The number of nodes in the cluster.
     */
    public /*out*/ readonly numNodes!: pulumi.Output<number>;
    /**
     * The organization id of the cluster.
     */
    public readonly organizationId!: pulumi.Output<string>;
    /**
     * The origin of the cluster.
     */
    public /*out*/ readonly origin!: pulumi.Output<string>;
    /**
     * The password of the cluster.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * The product name of the cluster.
     */
    public readonly productName!: pulumi.Output<string>;
    /**
     * The product tier of the cluster.
     */
    public readonly productTier!: pulumi.Output<string>;
    /**
     * The product unit of the cluster. Default is `0`.
     */
    public readonly productUnit!: pulumi.Output<number>;
    /**
     * The project id of the cluster.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The subscription id of the cluster.
     */
    public readonly subscriptionId!: pulumi.Output<string>;
    /**
     * The suspended flag.
     */
    public /*out*/ readonly suspended!: pulumi.Output<boolean>;
    /**
     * The URL of the cluster.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;
    /**
     * The username of the cluster.
     */
    public readonly username!: pulumi.Output<string>;

    /**
     * Create a Cluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterArgs | ClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterState | undefined;
            resourceInputs["allowCustomStorage"] = state ? state.allowCustomStorage : undefined;
            resourceInputs["allowSuspend"] = state ? state.allowSuspend : undefined;
            resourceInputs["backupSchedule"] = state ? state.backupSchedule : undefined;
            resourceInputs["channel"] = state ? state.channel : undefined;
            resourceInputs["crateVersion"] = state ? state.crateVersion : undefined;
            resourceInputs["dc"] = state ? state.dc : undefined;
            resourceInputs["deletionProtected"] = state ? state.deletionProtected : undefined;
            resourceInputs["externalIp"] = state ? state.externalIp : undefined;
            resourceInputs["fqdn"] = state ? state.fqdn : undefined;
            resourceInputs["gcAvailable"] = state ? state.gcAvailable : undefined;
            resourceInputs["hardwareSpecs"] = state ? state.hardwareSpecs : undefined;
            resourceInputs["health"] = state ? state.health : undefined;
            resourceInputs["ipWhitelists"] = state ? state.ipWhitelists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["numNodes"] = state ? state.numNodes : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["productName"] = state ? state.productName : undefined;
            resourceInputs["productTier"] = state ? state.productTier : undefined;
            resourceInputs["productUnit"] = state ? state.productUnit : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["subscriptionId"] = state ? state.subscriptionId : undefined;
            resourceInputs["suspended"] = state ? state.suspended : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as ClusterArgs | undefined;
            if ((!args || args.crateVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crateVersion'");
            }
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.productName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productName'");
            }
            if ((!args || args.productTier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'productTier'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.subscriptionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subscriptionId'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["channel"] = args ? args.channel : undefined;
            resourceInputs["crateVersion"] = args ? args.crateVersion : undefined;
            resourceInputs["hardwareSpecs"] = args ? args.hardwareSpecs : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["productName"] = args ? args.productName : undefined;
            resourceInputs["productTier"] = args ? args.productTier : undefined;
            resourceInputs["productUnit"] = args ? args.productUnit : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["subscriptionId"] = args ? args.subscriptionId : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["allowCustomStorage"] = undefined /*out*/;
            resourceInputs["allowSuspend"] = undefined /*out*/;
            resourceInputs["backupSchedule"] = undefined /*out*/;
            resourceInputs["dc"] = undefined /*out*/;
            resourceInputs["deletionProtected"] = undefined /*out*/;
            resourceInputs["externalIp"] = undefined /*out*/;
            resourceInputs["fqdn"] = undefined /*out*/;
            resourceInputs["gcAvailable"] = undefined /*out*/;
            resourceInputs["health"] = undefined /*out*/;
            resourceInputs["ipWhitelists"] = undefined /*out*/;
            resourceInputs["numNodes"] = undefined /*out*/;
            resourceInputs["origin"] = undefined /*out*/;
            resourceInputs["suspended"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Cluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Cluster resources.
 */
export interface ClusterState {
    /**
     * The allow custom storage flag.
     */
    allowCustomStorage?: pulumi.Input<boolean>;
    /**
     * The allow suspend flag.
     */
    allowSuspend?: pulumi.Input<boolean>;
    /**
     * The backup schedule.
     */
    backupSchedule?: pulumi.Input<string>;
    /**
     * The channel of the cluster. Default is `stable`.
     */
    channel?: pulumi.Input<string>;
    /**
     * The CrateDB version of the cluster.
     */
    crateVersion?: pulumi.Input<string>;
    /**
     * The DublinCore of the cluster.
     */
    dc?: pulumi.Input<inputs.ClusterDc>;
    /**
     * The deletion protected flag.
     */
    deletionProtected?: pulumi.Input<boolean>;
    /**
     * The external IP address.
     */
    externalIp?: pulumi.Input<string>;
    /**
     * The Fully Qualified Domain Name.
     */
    fqdn?: pulumi.Input<string>;
    /**
     * The garbage collection available flag.
     */
    gcAvailable?: pulumi.Input<boolean>;
    /**
     * The hardware specs of the cluster.
     */
    hardwareSpecs?: pulumi.Input<inputs.ClusterHardwareSpecs>;
    /**
     * The health of the cluster.
     */
    health?: pulumi.Input<inputs.ClusterHealth>;
    /**
     * The IP whitelist of the cluster.
     */
    ipWhitelists?: pulumi.Input<pulumi.Input<inputs.ClusterIpWhitelist>[]>;
    /**
     * The name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The number of nodes in the cluster.
     */
    numNodes?: pulumi.Input<number>;
    /**
     * The organization id of the cluster.
     */
    organizationId?: pulumi.Input<string>;
    /**
     * The origin of the cluster.
     */
    origin?: pulumi.Input<string>;
    /**
     * The password of the cluster.
     */
    password?: pulumi.Input<string>;
    /**
     * The product name of the cluster.
     */
    productName?: pulumi.Input<string>;
    /**
     * The product tier of the cluster.
     */
    productTier?: pulumi.Input<string>;
    /**
     * The product unit of the cluster. Default is `0`.
     */
    productUnit?: pulumi.Input<number>;
    /**
     * The project id of the cluster.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The subscription id of the cluster.
     */
    subscriptionId?: pulumi.Input<string>;
    /**
     * The suspended flag.
     */
    suspended?: pulumi.Input<boolean>;
    /**
     * The URL of the cluster.
     */
    url?: pulumi.Input<string>;
    /**
     * The username of the cluster.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Cluster resource.
 */
export interface ClusterArgs {
    /**
     * The channel of the cluster. Default is `stable`.
     */
    channel?: pulumi.Input<string>;
    /**
     * The CrateDB version of the cluster.
     */
    crateVersion: pulumi.Input<string>;
    /**
     * The hardware specs of the cluster.
     */
    hardwareSpecs?: pulumi.Input<inputs.ClusterHardwareSpecs>;
    /**
     * The name of the cluster.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization id of the cluster.
     */
    organizationId: pulumi.Input<string>;
    /**
     * The password of the cluster.
     */
    password: pulumi.Input<string>;
    /**
     * The product name of the cluster.
     */
    productName: pulumi.Input<string>;
    /**
     * The product tier of the cluster.
     */
    productTier: pulumi.Input<string>;
    /**
     * The product unit of the cluster. Default is `0`.
     */
    productUnit?: pulumi.Input<number>;
    /**
     * The project id of the cluster.
     */
    projectId: pulumi.Input<string>;
    /**
     * The subscription id of the cluster.
     */
    subscriptionId: pulumi.Input<string>;
    /**
     * The username of the cluster.
     */
    username: pulumi.Input<string>;
}
