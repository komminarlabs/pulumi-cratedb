// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cratedb

import (
	"context"
	"reflect"

	"github.com/komminarlabs/pulumi-cratedb/sdk/go/cratedb/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates and manages an organization.
type Organization struct {
	pulumi.CustomResourceState

	// The DublinCore of the organization.
	Dc OrganizationDcOutput `pulumi:"dc"`
	// The notification email used in the organization.
	Email pulumi.StringOutput `pulumi:"email"`
	// The name of the organization.
	Name pulumi.StringOutput `pulumi:"name"`
	// Whether notifications enabled for the organization.
	NotificationsEnabled pulumi.BoolOutput `pulumi:"notificationsEnabled"`
	// The support plan type used in the organization.
	PlanType pulumi.IntOutput `pulumi:"planType"`
	// The project count in the organization.
	ProjectCount pulumi.IntOutput `pulumi:"projectCount"`
	// The role FQN.
	RoleFqn pulumi.StringOutput `pulumi:"roleFqn"`
}

// NewOrganization registers a new resource with the given unique name, arguments, and options.
func NewOrganization(ctx *pulumi.Context,
	name string, args *OrganizationArgs, opts ...pulumi.ResourceOption) (*Organization, error) {
	if args == nil {
		args = &OrganizationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Organization
	err := ctx.RegisterResource("cratedb:index/organization:Organization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOrganization gets an existing Organization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOrganization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OrganizationState, opts ...pulumi.ResourceOption) (*Organization, error) {
	var resource Organization
	err := ctx.ReadResource("cratedb:index/organization:Organization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Organization resources.
type organizationState struct {
	// The DublinCore of the organization.
	Dc *OrganizationDc `pulumi:"dc"`
	// The notification email used in the organization.
	Email *string `pulumi:"email"`
	// The name of the organization.
	Name *string `pulumi:"name"`
	// Whether notifications enabled for the organization.
	NotificationsEnabled *bool `pulumi:"notificationsEnabled"`
	// The support plan type used in the organization.
	PlanType *int `pulumi:"planType"`
	// The project count in the organization.
	ProjectCount *int `pulumi:"projectCount"`
	// The role FQN.
	RoleFqn *string `pulumi:"roleFqn"`
}

type OrganizationState struct {
	// The DublinCore of the organization.
	Dc OrganizationDcPtrInput
	// The notification email used in the organization.
	Email pulumi.StringPtrInput
	// The name of the organization.
	Name pulumi.StringPtrInput
	// Whether notifications enabled for the organization.
	NotificationsEnabled pulumi.BoolPtrInput
	// The support plan type used in the organization.
	PlanType pulumi.IntPtrInput
	// The project count in the organization.
	ProjectCount pulumi.IntPtrInput
	// The role FQN.
	RoleFqn pulumi.StringPtrInput
}

func (OrganizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationState)(nil)).Elem()
}

type organizationArgs struct {
	// The name of the organization.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a Organization resource.
type OrganizationArgs struct {
	// The name of the organization.
	Name pulumi.StringPtrInput
}

func (OrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*organizationArgs)(nil)).Elem()
}

type OrganizationInput interface {
	pulumi.Input

	ToOrganizationOutput() OrganizationOutput
	ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput
}

func (*Organization) ElementType() reflect.Type {
	return reflect.TypeOf((**Organization)(nil)).Elem()
}

func (i *Organization) ToOrganizationOutput() OrganizationOutput {
	return i.ToOrganizationOutputWithContext(context.Background())
}

func (i *Organization) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationOutput)
}

// OrganizationArrayInput is an input type that accepts OrganizationArray and OrganizationArrayOutput values.
// You can construct a concrete instance of `OrganizationArrayInput` via:
//
//	OrganizationArray{ OrganizationArgs{...} }
type OrganizationArrayInput interface {
	pulumi.Input

	ToOrganizationArrayOutput() OrganizationArrayOutput
	ToOrganizationArrayOutputWithContext(context.Context) OrganizationArrayOutput
}

type OrganizationArray []OrganizationInput

func (OrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Organization)(nil)).Elem()
}

func (i OrganizationArray) ToOrganizationArrayOutput() OrganizationArrayOutput {
	return i.ToOrganizationArrayOutputWithContext(context.Background())
}

func (i OrganizationArray) ToOrganizationArrayOutputWithContext(ctx context.Context) OrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationArrayOutput)
}

// OrganizationMapInput is an input type that accepts OrganizationMap and OrganizationMapOutput values.
// You can construct a concrete instance of `OrganizationMapInput` via:
//
//	OrganizationMap{ "key": OrganizationArgs{...} }
type OrganizationMapInput interface {
	pulumi.Input

	ToOrganizationMapOutput() OrganizationMapOutput
	ToOrganizationMapOutputWithContext(context.Context) OrganizationMapOutput
}

type OrganizationMap map[string]OrganizationInput

func (OrganizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Organization)(nil)).Elem()
}

func (i OrganizationMap) ToOrganizationMapOutput() OrganizationMapOutput {
	return i.ToOrganizationMapOutputWithContext(context.Background())
}

func (i OrganizationMap) ToOrganizationMapOutputWithContext(ctx context.Context) OrganizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OrganizationMapOutput)
}

type OrganizationOutput struct{ *pulumi.OutputState }

func (OrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Organization)(nil)).Elem()
}

func (o OrganizationOutput) ToOrganizationOutput() OrganizationOutput {
	return o
}

func (o OrganizationOutput) ToOrganizationOutputWithContext(ctx context.Context) OrganizationOutput {
	return o
}

// The DublinCore of the organization.
func (o OrganizationOutput) Dc() OrganizationDcOutput {
	return o.ApplyT(func(v *Organization) OrganizationDcOutput { return v.Dc }).(OrganizationDcOutput)
}

// The notification email used in the organization.
func (o OrganizationOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// The name of the organization.
func (o OrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Whether notifications enabled for the organization.
func (o OrganizationOutput) NotificationsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Organization) pulumi.BoolOutput { return v.NotificationsEnabled }).(pulumi.BoolOutput)
}

// The support plan type used in the organization.
func (o OrganizationOutput) PlanType() pulumi.IntOutput {
	return o.ApplyT(func(v *Organization) pulumi.IntOutput { return v.PlanType }).(pulumi.IntOutput)
}

// The project count in the organization.
func (o OrganizationOutput) ProjectCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Organization) pulumi.IntOutput { return v.ProjectCount }).(pulumi.IntOutput)
}

// The role FQN.
func (o OrganizationOutput) RoleFqn() pulumi.StringOutput {
	return o.ApplyT(func(v *Organization) pulumi.StringOutput { return v.RoleFqn }).(pulumi.StringOutput)
}

type OrganizationArrayOutput struct{ *pulumi.OutputState }

func (OrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Organization)(nil)).Elem()
}

func (o OrganizationArrayOutput) ToOrganizationArrayOutput() OrganizationArrayOutput {
	return o
}

func (o OrganizationArrayOutput) ToOrganizationArrayOutputWithContext(ctx context.Context) OrganizationArrayOutput {
	return o
}

func (o OrganizationArrayOutput) Index(i pulumi.IntInput) OrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Organization {
		return vs[0].([]*Organization)[vs[1].(int)]
	}).(OrganizationOutput)
}

type OrganizationMapOutput struct{ *pulumi.OutputState }

func (OrganizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Organization)(nil)).Elem()
}

func (o OrganizationMapOutput) ToOrganizationMapOutput() OrganizationMapOutput {
	return o
}

func (o OrganizationMapOutput) ToOrganizationMapOutputWithContext(ctx context.Context) OrganizationMapOutput {
	return o
}

func (o OrganizationMapOutput) MapIndex(k pulumi.StringInput) OrganizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Organization {
		return vs[0].(map[string]*Organization)[vs[1].(string)]
	}).(OrganizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationInput)(nil)).Elem(), &Organization{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationArrayInput)(nil)).Elem(), OrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OrganizationMapInput)(nil)).Elem(), OrganizationMap{})
	pulumi.RegisterOutputType(OrganizationOutput{})
	pulumi.RegisterOutputType(OrganizationArrayOutput{})
	pulumi.RegisterOutputType(OrganizationMapOutput{})
}
